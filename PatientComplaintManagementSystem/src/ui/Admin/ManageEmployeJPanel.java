/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Admin;

import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import network.Model.HealthCareProfessional;
import network.Model.Specialist;
import network.Model.User;
import network.Model.UserDirectory;

/**
 *
 * @author Abhishek Patil
 */
public class ManageEmployeJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    UserDirectory userDirectory;
    User authenticatedUser;

    /**
     * Creates new form ManageHCPJPanel
     */
    public ManageEmployeJPanel(JPanel userProcessContainer, UserDirectory userDirectory) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.userDirectory=userDirectory;
        
        populateTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmploye = new javax.swing.JTable();
        btnViewHCPReport = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();

        tblEmploye.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEmploye);

        btnViewHCPReport.setText("View HCP report");

        btnAdd.setText("Add HCPs");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete HCPs");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnView.setText("View HCPs");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitle.setText("Manage HCP");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(132, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnView))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(162, 162, 162))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnBack)
                        .addGap(205, 205, 205)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(298, 298, 298)
                        .addComponent(btnViewHCPReport)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(lblTitle))
                .addGap(64, 64, 64)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(btnViewHCPReport)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnDelete)
                    .addComponent(btnView))
                .addContainerGap(153, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:AddHCPsJPanel
            AddHCPsJPanel ahcpjp = new AddHCPsJPanel(userProcessContainer,userDirectory);
            userProcessContainer.add("AddHCPsJPanel", ahcpjp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
            
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblEmploye.getSelectedRow(); // Get the selected row index

    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select an employee to delete.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Get the ID of the selected user from the table
    String selectedId = (String) tblEmploye.getValueAt(selectedRow, 0); 

    // Find and remove the user from the UserDirectory
    User userToRemove = null;
    for (User user : userDirectory.getUserList()) {
        if ((user instanceof HealthCareProfessional && ((HealthCareProfessional) user).getProfessionalId().equals(selectedId)) ||
            (user instanceof Specialist && ((Specialist) user).getSpecialistId().equals(selectedId))) {
            userToRemove = user;
            break;
        }
    }

    if (userToRemove != null) {
        userDirectory.getUserList().remove(userToRemove);
        JOptionPane.showMessageDialog(this, "Employee deleted successfully.", "Info", JOptionPane.INFORMATION_MESSAGE);
        populateTable(); // Refresh the table after deletion
    } else {
        JOptionPane.showMessageDialog(this, "Unable to find the selected employee.", "Error", JOptionPane.ERROR_MESSAGE);
    }
        
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblEmploye.getSelectedRow(); // Get the selected row index

    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select an employee to view.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Get the ID of the selected user
    String selectedId = (String) tblEmploye.getValueAt(selectedRow, 0);

    // Find the user from the UserDirectory based on the ID
    User selectedUser = null;
    for (User user : userDirectory.getUserList()) {
        if ((user instanceof HealthCareProfessional && ((HealthCareProfessional) user).getProfessionalId().equals(selectedId)) ||
            (user instanceof Specialist && ((Specialist) user).getSpecialistId().equals(selectedId))) {
            selectedUser = user;
            break;
        }
    }

    if (selectedUser != null) {
        // Pass the selected user to ViewHCPJPanel
        ViewHCPJPanel vhcpjp = new ViewHCPJPanel(userProcessContainer, selectedUser);
        userProcessContainer.add("ViewHCPJPanel", vhcpjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    } else {
        JOptionPane.showMessageDialog(this, "Unable to find the selected employee.", "Error", JOptionPane.ERROR_MESSAGE);
    }
        
    }//GEN-LAST:event_btnViewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnView;
    private javax.swing.JButton btnViewHCPReport;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblEmploye;
    // End of variables declaration//GEN-END:variables

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblEmploye.getModel();
    model.setRowCount(0); // Clear the table before populating
    
    
        

    for (User user : userDirectory.getUserList()) {
        if (user instanceof HealthCareProfessional) {
            HealthCareProfessional hcp = (HealthCareProfessional) user;
            model.addRow(new Object[]{
                hcp.getProfessionalId(),
                hcp.getName()
            });
        } else if (user instanceof Specialist) {
            Specialist specialist = (Specialist) user;
            model.addRow(new Object[]{
                specialist.getSpecialistId(),
                specialist.getName()
            });
        }
    }
        
        
    }
}
