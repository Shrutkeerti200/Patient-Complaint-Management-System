/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Pharmacist;

import java.awt.CardLayout;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import network.Business;
import network.Medication.MedicationOrder;

import network.Model.Pharmacist;
import network.Model.User;

/**
 *
 * @author SS
 */
public class PharmacistWorkAreaJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    List<MedicationOrder> orders;

    Pharmacist pharmacist;
    User authenticatedUser;
    Business business;

    /**
     * Creates new form PharmacistWorkAreaJPanel
     */
    public PharmacistWorkAreaJPanel(JPanel userProcessContainer, User authenticatedUser, Business business) {

        initComponents();

        this.userProcessContainer = userProcessContainer;

        this.authenticatedUser = authenticatedUser;
        this.business = business;

        pharmacist = (Pharmacist) authenticatedUser;

        //if (pharmacist != null) {

        populateOrderTable();
        //} else {
        //    System.out.println("Pharmacist is not initialized properly.");
        //}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ordersTable = new javax.swing.JTable();
        btnViewOrder = new javax.swing.JButton();

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitle.setText("Review Drug Request");

        ordersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Order ID", "Patient ID", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ordersTable);

        btnViewOrder.setText("View Order");
        btnViewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(249, 249, 249))
            .addGroup(layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnViewOrder)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(166, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblTitle)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnViewOrder)
                .addContainerGap(132, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderActionPerformed
        // TODO add your handling code here:
        int selectedRow = ordersTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select an order first.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String orderId = (String) ordersTable.getValueAt(selectedRow, 0);


        // Find the order by its ID from the pharmacist's pending orders
        MedicationOrder selectedOrder = null;
        for (MedicationOrder order : pharmacist.getPendingOrders()) {
            if (order.getOrderId().equals(orderId)) {
                selectedOrder = order;
                break;
            }
        }
        if (selectedOrder != null) {
            // Pass the selected order to the ViewOrderJPanel
            ViewOrderJPanel vojp = new ViewOrderJPanel(userProcessContainer, selectedOrder, business, authenticatedUser);
            userProcessContainer.add("ViewOrderJPanel", vojp);

            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(this, "Order not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnViewOrderActionPerformed

    public void populateOrderTable() {
        DefaultTableModel model = (DefaultTableModel) ordersTable.getModel();
        model.setRowCount(0);
        pharmacist = (Pharmacist) authenticatedUser;
        System.out.println("Pending Orders Size: " + pharmacist.getPendingOrders().size());

        // Ensure pharmacist is initialized
        if (pharmacist != null && pharmacist.getPendingOrders() != null) {
            System.out.println("Number of pending orders: " + pharmacist.getPendingOrders().size());
            for (MedicationOrder order : pharmacist.getPendingOrders()) {
                System.out.println("Order ID: " + order.getOrderId() + ", Status: " + order.getStatus()); // Debug log
                String status = order.getStatus();
                Object[] row = new Object[3];
                row[0] = order.getOrderId();
                row[1] = order.getPatientId();
                row[2] = status; // Ensure this reflects the updated status
                System.out.println("Updated Status: " + status);
                model.addRow(row);
            }
        } else {
            System.out.println("No pending orders found.");
        }
        model.fireTableDataChanged();
        ordersTable.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnViewOrder;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable ordersTable;
    // End of variables declaration//GEN-END:variables
}
