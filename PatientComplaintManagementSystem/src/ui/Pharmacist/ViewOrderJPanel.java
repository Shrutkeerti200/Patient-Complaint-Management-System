/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Pharmacist;

import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import network.Business;
import network.Drug.Drug;
import network.Drug.DrugCatalog;
import network.Medication.Medication;
import network.Medication.MedicationOrder;
import network.Model.User;
import network.Notification.Notification;
import network.Notification.NotificationDirectory;

/**
 *
 * @author SS
 */
public class ViewOrderJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    List<MedicationOrder> orders;
    MedicationOrder selectedOrder;
    DrugCatalog drugCatalog;
    Business business;
    NotificationDirectory notificationDirectory;
    User authenticatedUser;


    /**
     * Creates new form ViewOrderJPanel
     */

    public ViewOrderJPanel(JPanel userProcessContainer, MedicationOrder selectedOrder, Business business, User user) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.selectedOrder = selectedOrder;
        this.drugCatalog = business.getDrugCatalog();
        this.business = business;
        this.authenticatedUser = user;
        this.notificationDirectory = this.business.getNotificationDirectory();


        populateMedicationsTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        medicationsTable = new javax.swing.JTable();
        lblTotalPrice = new javax.swing.JLabel();
        txtTotalPrice = new javax.swing.JTextField();
        lblMedication = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblOrderID = new javax.swing.JLabel();
        lblPatientID = new javax.swing.JLabel();
        txtPatientID = new javax.swing.JTextField();
        txtOrderID = new javax.swing.JTextField();
        btnApproveOrder = new javax.swing.JButton();
        btnViewDrugCatalog = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        medicationsTable.setBackground(new java.awt.Color(153, 255, 255));
        medicationsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Drug ID", "Drug Name", "Dosage", "Price", "Availability", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(medicationsTable);

        lblTotalPrice.setText("Total Price:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblTotalPrice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotalPrice)
                    .addComponent(txtTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        lblMedication.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblMedication.setText("Medication:");

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitle.setText("Order Details");

        lblOrderID.setText("Order ID:");

        lblPatientID.setText("Patient ID:");

        btnApproveOrder.setText("Approve Order");
        btnApproveOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveOrderActionPerformed(evt);
            }
        });

        btnViewDrugCatalog.setText("View Drug Catalog");
        btnViewDrugCatalog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDrugCatalogActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(btnBack)
                .addGap(227, 227, 227)
                .addComponent(lblTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(120, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnViewDrugCatalog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnApproveOrder))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblOrderID)
                            .addGap(18, 18, 18)
                            .addComponent(txtOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(171, 171, 171)
                            .addComponent(lblPatientID)
                            .addGap(18, 18, 18)
                            .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(lblMedication)))
                .addGap(71, 71, 71))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(btnBack))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrderID)
                    .addComponent(lblPatientID)
                    .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblMedication)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnApproveOrder)
                    .addComponent(btnViewDrugCatalog))
                .addContainerGap(106, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewDrugCatalogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDrugCatalogActionPerformed
        // TODO add your handling code here:

        ViewDrugCatalogJPanel vdcjp = new ViewDrugCatalogJPanel(userProcessContainer, drugCatalog, business, authenticatedUser);

        userProcessContainer.add("ViewDrugCatalogJPanel", vdcjp);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnViewDrugCatalogActionPerformed

    private void btnApproveOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveOrderActionPerformed
        // TODO add your handling code here:
        int selectedRow = medicationsTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a medication to approve.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String drugName = (String) medicationsTable.getValueAt(selectedRow, 1);
        Medication selectedMedication = selectedOrder.getMedicationsList().stream()
                .filter(m -> m.getDrugName().equalsIgnoreCase(drugName))
                .findFirst()
                .orElse(null);

        if (selectedMedication == null) {
            JOptionPane.showMessageDialog(this, "Invalid medication selected.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Drug drug = drugCatalog.getDrugByName(drugName);
        if (drug == null) {
            JOptionPane.showMessageDialog(this, "Drug not found in catalog.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int dosage = Integer.parseInt(selectedMedication.getDosage());
        if (drug.getAvailablility() < dosage) {
            JOptionPane.showMessageDialog(this, "Insufficient drug availability. Please request stock.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Update drug availability
        drug.setAvailablility(drug.getAvailablility() - dosage);

        // Check if all medications are available
        boolean allMedicationsAvailable = selectedOrder.getMedicationsList().stream()
                .allMatch(m -> {
                    Drug d = drugCatalog.getDrugByName(m.getDrugName());
                    return d != null && d.getAvailablility() >= Integer.parseInt(m.getDosage());
                });

        System.out.println("Order ID: " + selectedOrder.getOrderId());
        System.out.println("Initial Status: " + selectedOrder.getStatus());

        // Update order status based on availability
        if (allMedicationsAvailable) {
            selectedOrder.setStatus("Fulfilled");
            System.out.println("Updated Status: " + selectedOrder.getStatus());
            JOptionPane.showMessageDialog(this, "Order approved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            populateMedicationsTable();
        } else {
            System.out.println("Updated Status: " + selectedOrder.getStatus());
            JOptionPane.showMessageDialog(this, "Some medications have insufficient stock. Please check the drug catalog.", "Warning", JOptionPane.WARNING_MESSAGE);
        }


        // Refresh table and update total price
        populateMedicationsTable();
        addNotificationForSelectedCategory();


        // Refresh the medications table
        //populateMedicationsTable();

        // Update parent panel
        if (userProcessContainer.getComponent(userProcessContainer.getComponentCount() - 1) instanceof PharmacistWorkAreaJPanel) {
            PharmacistWorkAreaJPanel workArea = (PharmacistWorkAreaJPanel) userProcessContainer.getComponent(userProcessContainer.getComponentCount() - 1);
            workArea.populateOrderTable();
        }

    }//GEN-LAST:event_btnApproveOrderActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void populateMedicationsTable() {
        txtOrderID.setText(selectedOrder.getOrderId());
        txtPatientID.setText(selectedOrder.getPatientId());

        DefaultTableModel model = (DefaultTableModel) medicationsTable.getModel();
        model.setRowCount(0);

        double orderTotalPrice = 0;

        for (Medication medication : selectedOrder.getMedicationsList()) {
            Object[] row = new Object[6];

            int dosage = Integer.parseInt(medication.getDosage());

            row[0] = medication.getDrugId();
            row[1] = medication.getDrugName();
            row[2] = dosage;

            Drug drug = drugCatalog.getDrugByName(medication.getDrugName());
            if (drug != null) {
                double pricePerUnit = drug.getPrice();
                int availableStock = drug.getAvailablility();
                String status = selectedOrder.getStatus();

                row[3] = pricePerUnit;
                row[4] = availableStock;
                row[5] = status;

                // Add logic to calculate the total price per medication
                double totalPrice = dosage * pricePerUnit;
                orderTotalPrice = orderTotalPrice + totalPrice;

            } else {
                row[3] = "N/A";
                row[4] = "N/A";
                row[5] = "Drug Not Found";
            }
            model.addRow(row);
        }
        // Update total price of the order
        selectedOrder.setTotalPrice(orderTotalPrice);
        txtTotalPrice.setText(String.format("%.2f", orderTotalPrice));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApproveOrder;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnViewDrugCatalog;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMedication;
    private javax.swing.JLabel lblOrderID;
    private javax.swing.JLabel lblPatientID;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalPrice;
    private javax.swing.JTable medicationsTable;
    private javax.swing.JTextField txtOrderID;
    private javax.swing.JTextField txtPatientID;
    private javax.swing.JTextField txtTotalPrice;
    // End of variables declaration//GEN-END:variables

    private void addNotificationForSelectedCategory() {
     
        // Get the current timestamp
    String currentTimestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

    // Check if an order is selected and has a valid ID
    if (selectedOrder != null && selectedOrder.getOrderId() != null) {
        String orderId = selectedOrder.getOrderId();
        
        // Create a new notification
        Notification notification = new Notification(
            "Approved",                  // Status
            currentTimestamp,            // Timestamp
            authenticatedUser.getRole(), // FromRole
            "Patient",                   // ToRole
            orderId                      // Regarding
        );

        // Set the intended user for the notification (e.g., Patient ID)
        notification.setToUser(selectedOrder.getPatientId());

        // Optionally, add additional notes or details
        notification.setAdditionalNote("Order " + orderId + " has been approved.");

        // Add the notification to the NotificationDirectory
        notificationDirectory.addNewNotification(notification);

        // Confirmation message
        JOptionPane.showMessageDialog(this, "Notification sent for Order ID: " + orderId, "Notification Sent", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "Invalid Order. Cannot send notification.", "Error", JOptionPane.ERROR_MESSAGE);
    }
        
}
}